<?php

/**
 * @file
 * DEIMS data explorer allows users to view and download remote data sources.
 *
 * @todo Move all non-hooks and page callbacks out of the module file
 * @todo Use variable_get() and not constants
 * @todo Add a 'Use the data explorer' permission
 */

/**
 * Define the maximum number of rows to display in the data preview.
 */
define("DEIMS_PREVIEW_COUNT", variable_get('deims_preview_count', 500));

/**
 * Define the maximum number of rows to be downloaded.
 */
define("DEIMS_DOWNLOAD_COUNT", variable_get('deims_download_count', 999999));

/**
 * Define the maximum number of rows be downloaded.
 */
define("DEIMS_BATCH_LIMIT", variable_get('deims_batch_limit', 25000));

/**
 * Define the smallest size file that will be compressed (in MB).
 */
define("DEIMS_COMPRESSION_THRESHOLD", variable_get('deims_compression_threshold', 10));

/**
 * The field machine name created in deims_install().
 */
define('DEIMS_DATA_EXPLORER_FIELD', 'field_deims_data_explorer');

/**
 * Implements hook_help().
 */
function deims_data_explorer_help($path, $arg) {
  switch ($path) {
    case 'node/%/data':
      break;
  }
}

/**
 * Implements hook_menu().
 */
function deims_data_explorer_menu() {
  $items = array();
  $items['node/%node/data'] = array(
    'page callback' => 'deims_data_explorer_page',
    'page arguments' => array(1),
    'access callback'  => 'deims_data_explorer_page_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/data/download/%file'] = array(
    'page callback' => 'deims_data_explorer_download',
    'page arguments' => array(1, 4),
    'access callback' => 'deims_data_explorer_download_access',
    'access arguments' => array(1, 4),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function deims_data_explorer_permission() {
  $info = array();

  // This permission doesn't actually do anything because there are no
  // administration pages. So it has been commented out for now.
  //$info['adminster DEIMS data explorer'] = array(
  //  'title' => t('Administer DEIMS data explorer'),
  //  'restrict access' => TRUE,
  //);

  //$info['use DEIMS data explorer'] = array(
  //  'title' => t('Use the DEIMS data explorer'),
  //);

  return $info;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function deims_data_explorer_field_widget_deims_variable_default_form_alter(&$element, &$form_state, $context) {
  $item = isset($context['items'][$context['delta']]) ? $context['items'][$context['delta']] : array();

  $element['data']['data_explorer_settings'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Data Explorer Settings',
    '#options' => array(
      'expose' => t('Expose this variable'),
      'filter' => t('Allow users to filter on this variable'),
    ),
    '#default_value' => isset($item['data']['data_explorer_settings']) ? $item['data']['data_explorer_settings'] : array(),
    '#weight' => '100',
  );
}

/**
 * Implements hook_node_load().
 */
function deims_data_explorer_node_load(array $nodes) {
  foreach ($nodes as $node) {
    if ($node->type == 'data_source' && $query = deims_data_explorer_get_query_from_data_source($node)) {
      $count = $query->countQuery()->execute()->fetchField();
      // Store the row count of the external database in the field value so
      // it can be checked later.
      $langcode = field_language('node', $node, DEIMS_DATA_EXPLORER_FIELD);
      $node->{DEIMS_DATA_EXPLORER_FIELD}[$langcode][0]['row_count'] = $count;
    }
  }
}

/**
 * Access callback for the data explorer page.
 *
 * @param $node
 *   The data source node object.
 */
function deims_data_explorer_page_access($node) {
  return $node->type == 'data_source'
      && node_access('view', $node)
      && ($items = field_get_items('node', $node, DEIMS_DATA_EXPLORER_FIELD))
      && !empty($items[0]['row_count']);
}

/**
 * Access callback for the data explorer download file page.
 *
 * @param $node
 *   The data source node object.
 * @param $file
 *   The exported CSV file object.
 */
function deims_data_explorer_download_access($node, $file) {
  return deims_data_explorer_page_access($node) && file_entity_access('download', $file);
}

/**
 * @todo Document deims_data_explorer_page .
 *
 * @param $node
 *
 * @return int
 */
function deims_data_explorer_page($node) {
  // @todo Determine any other checks we need to do.
  if ($node->type != 'data_source') {
    return MENU_NOT_FOUND;
  }

  $connection = field_get_items('node', $node, 'field_deims_data_explorer');
  $variables  = field_get_items('node', $node, 'field_variables');

  if (!empty($connection) && !empty($variables)) {
    $form = drupal_get_form('deims_data_explorer_form', $variables, $connection[0], $node);
    return $form;
  }
  else {
    return MENU_NOT_FOUND;
  }
}


/**
 * @todo Document deims_data_explorer_form .
 *
 * @param $form
 * @param $form_state
 * @param $columns
 * @param $variables
 *
 * @return mixed
 */
function deims_data_explorer_form($form, &$form_state, $variables, $connection, $node) {
  // Get the allowed columns from the data source variable definitions.
  $allowed_column_variables = _deims_de_get_allowed_columns($variables);
  // Get allowed filters from the data source variable definitions.
  $allowed_filters_variables = _deims_de_get_allowed_filters($variables);

  // Flatten the array of columns & filters to just the name value.
  $allowed_columns = _deims_de_flatten_allowed($allowed_column_variables);
  $allowed_filters = _deims_de_flatten_allowed($allowed_filters_variables);

  // Check if the form has been submitted.
  if (isset($form_state['values']['op'])) {
    // Get columns submitted in the form.
    $submitted_columns = _deims_de_get_submitted_columns($form_state['values']['columns_table']);

    // Take only the columns submitted AND are allowed.
    $columns = array_intersect($allowed_columns, $submitted_columns);

    // Get filters submitted in the form.
    $submitted_filters = _deims_de_get_submitted_filters($form_state['values']['filters_table']);

    // Take only the filters submitted AND are allowed.
    $filters = array_intersect($allowed_filters, $submitted_filters);

    switch ($form_state['values']['op']) {
      case 'Web Preview':
        $data = deims_data_explorer_get_rows($connection, $columns, $filters, DEIMS_PREVIEW_COUNT);
        $total_rows = deims_data_explorer_get_row_count($connection);

        $form['results'] = array(
          '#markup' => deims_data_explorer_generate_preview($columns, $data, $total_rows),
        );

        return $form;
        break;

      case 'Download':
        $file = file_save_data('', file_create_filename($connection['table'], variable_get('deims_data_explorer_dir', 'public://data-downloads/')));

        $options = array(
          'connection' => $connection,
          'columns' => $columns,
          'filters' => $filters,
          'total_rows' => deims_data_explorer_get_row_count($connection),
          'limit' => DEIMS_BATCH_LIMIT,
          'file' => $file,
        );

        // Set up the batch process.
        $batch = array(
          'title' => 'Processing Data Set',
          'operations' => array(
            array('_fetch_row_batch', array($options)),
            array('_process_file_for_download', array($file, $connection['table'], $form_state['values']['nid'])),
          ),
          'finished' => '_show_download_link',
          'file' => drupal_get_path('module', 'deims_data_explorer') . '/deims_data_explorer.batch.inc'
        );

        batch_set($batch);
        // This can be left blank because we're setting it in the finished
        // callback hackery magic.
        batch_process();
        break;
    }
  }

  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );

  // START: Create the table to select columns.
  $form['columns_set'] = array(
    '#type' => 'fieldset',
    '#title' => t('Please select what columns you would like to include.'),
  );

  $header  = array(
    'label' => t('Name'),
    'name' => t('Variable Label'),
    'type' => t('Variable Type'),
    'definition' => t('Definition'),
  );
  $options = array();
  foreach ($allowed_column_variables as $variable) {
    $options[$variable['name']] = array(
      'label' => $variable['label'],
      'name' => $variable['name'],
      'type' => $variable['type'],
      'definition' => $variable['definition'],
    );
  }
  $form['columns_set']['columns_table'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' => t('No columns found'),
  );
  // END: Create the table to select columns.


  // START: Create the table to select filters.
  $form['filter_set'] = array(
    '#type' => 'fieldset',
    '#title' => t('Please choose any filters you would like to add.'),
  );

  $header = array(
    'label' => t('Label'),
    'choice' => t('Choice'),
  );
  $options = array();
  foreach ($allowed_filters_variables as $variable) {
    $options[$variable['name']] = array(
      'label' => $variable['label'],
      'choice' => 'Choice',
    );
  }
  $form['filter_set']['filters_table'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' => t('No filters found'),
  );
  // END: Create the table to select filters.

  //deims_de_prep_variables($variables, $form);

  $form['preview'] = array(
    '#type' => 'submit',
    '#value' => 'Web Preview',
  );

  $form['download'] = array(
    '#type' => 'submit',
    '#value' => 'Download',
  );

  // Add logic for download button disable and warning.
  if (deims_data_explorer_get_row_count($connection) >= DEIMS_DOWNLOAD_COUNT) {
    drupal_set_message('This is a very large data set. Please ' . l('contact us', 'contact') .
      ' to obtain a copy.', 'warning', FALSE);
    unset($form['download']);
  }
  return $form;
}

function deims_data_explorer_form_submit($form, &$form_state) {
  // Exclude unnecessary elements.
  //unset($form_state['values']['submit'], $form_state['values']['form_id'], $form_state['values']['op'], $form_state['values']['form_token'], $form_state['values']['form_build_id']);

  foreach ($form_state['values'] as $key => $value) {
    // drupal_set_message(t('%name has value %value', array('%name' => $key, '%value' => print_r($value, TRUE))));
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * @todo Document
 *
 * @param array $item
 *
 * @return string
 */
function deims_data_explorer_generate_preview($columns_array, $rows_array, $total_rows = 0) {
  $count = null;
  if ($total_rows >= DEIMS_PREVIEW_COUNT) {
    $count = '<div class="deims-row-count">Showing <strong>' . DEIMS_PREVIEW_COUNT . '</strong>
    of <strong>'. $total_rows . '</strong> records';
  }

  $markup = $count . theme('table', array(
    'header' => $columns_array,
    'rows'   => $rows_array,
  )) . $count;

  return $markup;
}

/**
 * @todo Document _deims_de_get_allowed_columns .
 *
 * @param $variables
 *
 * @return array
 */
function _deims_de_get_allowed_columns($variables) {
  return $variables;
}

/**
 * @todo Document _deims_de_get_allowed_filters .
 *
 * @param $variables
 *
 * @return array
 */
function _deims_de_get_allowed_filters($variables) {
  return $variables;
}

function _deims_de_get_submitted_columns($columns) {
  $return = array();
  foreach ($columns as $key => $value) {
     if ($key == $value) {
       $return[] = $value;
     }
  }
  return $return;
}

function _deims_de_get_submitted_filters($columns) {
  $return = array();
  foreach ($columns as $key => $value) {
    if ($key == $value) {
      $return[] = $value;
    }
  }
  return $return;
}

function _deims_de_flatten_allowed($variables) {
  // @todo Change these to return the full variables and use the array map only where needed.
  // @todo Change to only include checked columns.
  return array_map(function ($value) { return $value['name']; }, $variables);
}

/**
 * [deims_data_explorer_get_row_count description]
 * @param  [type] $connection [description]
 * @return [type]             [description]
 */
function deims_data_explorer_get_row_count($connection) {
  $db = Database::getConnection('default', $connection['connection']);
  return $db->select($connection['table'])->countQuery()->execute()->fetchField();
}

/**
 * @todo Document deims_data_explorer_get_rows .
 *
 * @param $connection
 * @param array $columns
 * @param array $conditions
 * @param int $limit
 *
 * @return array
 */
function deims_data_explorer_get_rows($connection, $columns = array(), $conditions = array(), $limit = 20, $from = 0) {

  $db = Database::getConnection('default', $connection['connection']);

  $result = $db->select($connection['table'], 't')
    ->fields('t', $columns)
    ->range($from, $limit)
    ->execute();

  return $result->fetchAll(PDO::FETCH_ASSOC);
}

function _deims_de_prep_variable($variable, &$form) {
  if ($variable['type'] == '') {
    $variable['type'] = 'nominal';
  }
  $function = '_deims_de_prep_' . $variable['type'];
  if (function_exists($function)) {
    // Add to form.
    $function($variable, $form);
  }
}

function _deims_de_prep_variables($variables, &$form) {
  foreach ($variables as $variable) {
    if ($variable['type'] == '') {
      $variable['type'] = 'nominal';
    }
    $function = '_deims_de_prep_' . $variable['type'];
    if (function_exists($function)) {
      // Add to form.
      $function($variable, $form);
    }
    else {

    }
  }
}

/**
 * @todo Document _deims_prep_list .
 *
 * @param $variable
 */
function _deims_de_prep_codes($variable, &$form) {
  $codes = $variable['data']['codes'];
  $code_list = array();
  foreach ($codes as $key => $value) {
    $code_list[] = $key;
  }
  $name = $variable['name'];
  $form['filter_set'][$name] = array(
    '#type' => 'fieldset',
    '#title' => $name,
  );
  $form['filter_set'][$name][$name] = array(
    '#type' => 'checkboxes',
    '#options' => $code_list,
    '#title' => t('Limit by search codes:'),
  );
}

/**
 * @todo Document _deims_de_prep_nominal .
 *
 * @param $variable
 */
function _deims_de_prep_nominal($variable, &$form) {
  $name = $variable['name'];
  $form['filter_set'][$name] = array(
    '#type' => 'fieldset',
    '#title' => $name,
  );
  $form['filter_set'][$name][$name] = array(
    '#type' => 'textfield',
    '#title' => t('Limit by search term:'),
  );
}

/**
 * @todo Document _deims_de_prep_physical .
 *
 * @param $variable
 */
function _deims_de_prep_physical($variable, &$form) {

  $name = $variable['name'];
  $minimum = $variable['data']['minimum'];
  $maximum = $variable['data']['maximum'];
  $unit = $variable['data']['unit'];
  $precision = $variable['data']['precision'];
  $options = array();
  foreach (range($minimum, $maximum, $precision) as $number) {
    $options[] = $number;
  }
  $form['filter_set'][$name] = array(
    '#type'  => 'fieldset',
    '#title' => $name,
  );
// @todo Fix
  $form['filter_set'][$name][$name]['min'] = array(
    '#type'          => 'select',
    '#title'         => t("Choose a minimum $unit:"),
    '#options'       => $options,
    '#default_value' => $minimum,
  );
  $form['filter_set'][$name][$name]['max'] = array(
    '#type'          => 'select',
    '#title'         => t("Choose a maximum $unit:"),
    '#options'       => $options,
    '#default_value' => 10,
  );
}

/**
 * [deims_data_explorer_download description]
 */
function deims_data_explorer_download($node, $file) {
  if (!isset($_GET['token']) || !drupal_valid_token($_GET['token'], $_GET['q'])) {
    return MENU_ACCESS_DENIED;
  }


  $output =  array(
    'header' => array(
      '#markup' => '<h2>' . t('File ready for download') . '</h2>',
    ),
    'info' => array(
      '#markup' => '<p>' . t('Your file is ready to be downloaded. It will be available for the next few hours. Please download it now.') . '</p><p>' . theme('file_entity_download_link', array('file' => $file)) . '</p>',
    ),
    'back' => array(
      '#type' => 'markup',
      '#markup' => '<p>' . l('Return to data set', "node/{$node->nid}") . '</p>',
    ),
  );
  return $output;
}

/**
 * Implements hook_file_entity_access().
 *
 * By default temporary files are not downloadable. Because data explorer
 * exported files are saved as temporary, we need to manually allow those
 * files to be downloaded.
 */
function deims_data_explorer_file_entity_access($op, $file, $account) {
  if ($op == 'download' && $file->status != FILE_STATUS_PERMANENT && $file->uid == $account->uid && strpos($file->uri, variable_get('deims_data_explorer_dir', 'public://data-downloads/')) !== FALSE) {
    return FILE_ENTITY_ACCESS_ALLOW;
  }
  return FILE_ENTITY_ACCESS_IGNORE;
}

/**
 * @todo Document _deims_de_prep_date .
 *
 * @param $variable
 * @param $
 */
function _deims_de_prep_date($variable, &$form) {

  dpr($variable);
}

/**
 * @todo Document _deims_de_array2csv .
 *
 * @param array $array
 *
 * @return null|string
 */
function _deims_de_array2csv(array &$array) {
  if (count($array) == 0) {
    return NULL;
  }
  ob_start();
  $df = fopen("php://output", 'w');
  fputcsv($df, array_keys(reset($array)));
  foreach ($array as $row) {
    fputcsv($df, $row);
  }
  fclose($df);

  return ob_get_clean();
}

/**
 * Get a database query object for the data explorer for a given data source.
 *
 * @param object $node
 *   A data source node object.
 *
 * @return SelectQuery|false
 *   A query object for the database specified in the DEIMS_DATA_EXPLORER_FIELD
 *   field on the data source.
 */
function deims_data_explorer_get_query_from_data_source($node) {
  if ($node->type == 'data_source' && $connection = field_get_items('node', $node, DEIMS_DATA_EXPLORER_FIELD)) {
    if (!empty($connection[0]['connection']) && !empty($connection[0]['table'])) {
      try {
        // Database::getConnection() could throw an exception so catch it and
        // fail gracefully.
        if ($db = Database::getConnection('default', $connection[0]['connection'])) {
          if ($db->schema()->tableExists($connection[0]['table'])) {
            return $db->select($connection[0]['table']);
          }
        }
      }
      catch (Exception $e) {
        watchdog_exception($e);
        // Do not rethrow the exception. Fail gracefully by returning nothing.
      }
    }
  }

  return FALSE;
}

/**
 * Implements hook_field_attach_validate().
 *
 * Add extra validation if the user picks a database, but not a table or view.
 */
function deims_data_explorer_field_attach_validate($entity_type, $entity, array &$errors) {
  if ($entity_type == 'node' && $entity->type == 'data_source' && $items = field_get_items($entity_type, $entity, DEIMS_DATA_EXPLORER_FIELD)) {
    if (!empty($items[0]['connection']) && empty($items[0]['table'])) {
      $errors[DEIMS_DATA_EXPLORER_FIELD][LANGUAGE_NONE][0][] = array(
        'error' => 'field_missing_table',
        'message' => t('Cannot select a connection without selecting a table or view as well.'),
        'element' => array('table'),
      );
    }
  }
}

/**
 * Implements hook_workbench_block().
 *
 * Show a message in the workbench block if the data source has a valid
 * connection/table for the data explorer, but the data explorer doesn't have
 * any records.
 */
function deims_data_explorer_workbench_block() {
  // Add editing information to this page (if it's a node).
  if (($node = menu_get_object()) && $node->type == 'data_source' && node_access('update', $node)) {
    if ($items = field_get_items('node', $node, DEIMS_DATA_EXPLORER_FIELD)) {
      if (empty($items[0]['row_count'])) {
        return array('<strong>' . t('DEIMS Data Explorer: The table or view %table in the %connection database does not have any records. The data explorer will not be available until there is at least one record and caches are cleared.', array('%table' => $items[0]['table'], '%connection' => $items[0]['connection'])) . '</strong>');
      }
    }
  }
}
