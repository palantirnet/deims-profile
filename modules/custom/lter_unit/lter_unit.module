<?php

/**
 * @file
 * Integrates with the LTER Unit service API.
 *
 * http://unit.lternet.edu/unitregistry/
 */

/**
 * Definte the default unit scope for requests to the service. 2 = EML-2.1.0.
 */
define('LTER_UNIT_SCOPE', 2);

/**
 * Implements hook_menu().
 */
function lter_unit_menu() {
  $items['lter-unit/autocomplete'] = array(
    'page callback' => 'lter_unit_get_unit_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Perform a cached HTTP request.
 *
 * @param string $url
 *   A string containing a fully qualified URI.
 * @param array $options
 *   (optional) An array of options in the same format as drupal_http_request().
 *
 * @return mixed
 *   A response object in the same format as drupal_http_request(), or FALSE if
 *   the HTTP request error.
 */
function lter_unit_api_request_url($url, array $options = array()) {
  if (!isset($options['cid'])) {
    $options['cid'] = md5($url . ':' . serialize($options));
  }

  if ($cache = cache_get($options['cid'], 'cache_lter_unit')) {
    return $cache->data;
  }
  else {
    $request = drupal_http_request($url, $options);
    if (empty($request->error) && $request->code == 200 && !empty($request->data)) {
      cache_set($options['cid'], $request->data, 'cache_lter_unit');
      return $request->data;
    }
    else {
      // @todo Trigger some kind of error?

      // Save empty data in the cache.
      cache_set($options['cid'], FALSE, 'cache_liter_unit');
      return FALSE;
    }
  }
}

/**
 * Fetch an array of all EML standard units.
 */
function lter_unit_get_units() {
  $units = &drupal_static(__FUNCTION__);

  if (!isset($units)) {
    $cid = 'units:scope=2';
    if ($cache = cache_get($cid, 'cache_lter_unit')) {
      $units = $cache->data;
    }
    else {
      $units = array();
      $url = 'http://unit.lternet.edu/services/unitregistry/unit/(scopeId=' . LTER_UNIT_SCOPE . ')';
      $request = drupal_http_request($url, array('headers' => array('Accept' => 'application/json')));
      if (empty($request->error) && $request->code == 200 && !empty($request->data)) {
        if ($data = json_decode($request->data)) {
          foreach ($data as $entity) {
            $unit = array(
              'singular' => $entity->name,
              'plural' => $entity->name,
              'symbol' => $entity->abbreviation,
              'kind' => $entity->quantity->name,
              'source' => $url,
            );
            if (!empty($entity->deprecatedTo)) {
              $unit['deprecated'] = $entity->deprecatedTo->name;
            }
            $units[$entity->name] = $unit;
          }
        }
        else {
          trigger_error('Error parsing JSON data from ' . $url);
        }
      }
      cache_set($cid, $units, 'cache_lter_unit');
    }
  }

  return $units;
}

/**
 * Generate a list of options from lter_unit_get_units() for a select list.
 */
function lter_unit_get_unit_options($category_minimum = 0) {
  $results = &drupal_static(__FUNCTION__);

  if (!isset($results)) {
    $cid = 'unit-options:' . $GLOBALS['language']->language;
    if (FALSE && $cache = cache_get($cid, 'cache_lter_unit')) {
      $results = $cache->data;
    }
    else {
      $results = array();
      $units = lter_unit_get_units();
      foreach ($units as $unit) {
        $label = t($unit['singular']);
        if (!empty($unit['symbol']) && $unit['singular'] != $unit['symbol']) {
          $label .= ' (' . $unit['symbol'] . ')';
        }
        if (!empty($unit['kind'])) {
          $category = t($unit['kind']);
          if (!isset($results[$category])) {
            $results[$category] = array();
          }
          $results[$category][$unit['singular']] = $label;
        }
        else {
          $results[$unit['singular']] = $label;
        }
      }

      cache_set($cid, $results, 'cache_lter_unit');
    }
  }

  $return = $results;
  foreach ($return as $category => $option) {
    if (is_array($option)) {
      // Flatten categories if neccessary.
      if (!$category_minimum || count($option) < $category_minimum) {
        unset($return[$category]);
        $return += $option;
      }
      else {
        ksort($return[$category]);
      }
    }
  }

  ksort($return);
  return $return;
}

/**
 * Autocomplete callback for units.
 */
function lter_unit_get_unit_autocomplete($string = '') {
  $options = lter_unit_get_unit_options(0);
  $results = array();

  foreach ($options as $key => $label) {
    if (stripos($label, $string) !== FALSE) {
      $results[$key] = $label;
    }
  }

  $results = array_slice($results, 0, 10, TRUE);
  $results = array_map('check_plain', $results);

  drupal_json_output($results);
}

/**
 * Fetch the STMML XML of a custom unit.
 *
 * @param string $unit
 *   The name of the unit.
 *
 * @param bool $use_cache
 *
 * @return DOMElement
 *   A DOMElement of the <stmml:unit> tag for the unit.
 *
 * @todo Sean document this process.
 * @see http://www.w3schools.com/dom/dom_element.asp
 * @see http://www.php.net/manual/en/domxpath.query.php
 * @see http://www.php.net/manual/en/class.domdocument.php
 *
 *
 */
function lter_unit_get_unit_stmml($unit, $use_cache = FALSE) {
  $stmml = NULL;
  $dom = new DOMDocument();

  try {
    // Fetch the STMML data from the Unit API.
    $url = 'http://unit.lternet.edu/services/unitformat/stmml/unit/(name=' . $unit . ')';
    $options = array();
    $options['headers']['Accept'] = 'text/xml';
    $options['timeout'] = 10;
    $options['cid'] = 'stmml:' . $unit;

    if ($data = lter_unit_api_request_url($url, $options)) {

      // First check to see if the response even includes the unit.
      if (strpos($data, $unit) !== FALSE) {

        // Load and parse the STMML for modification.
        //$xml = simplexml_load_string($request->data);
        $dom->loadXML($data);
        $xpath = new DOMXpath($dom);

        // Inspect all the child elements of stmml:unitList
        foreach ($xpath->query('/stmml:unitList/node()') as $node) {

          // Skip any elements that are not actually stmml:unit.
          if ($node->tagName != 'stmml:unit') {
            continue;
          }

          if ($node->getAttribute('id') == $unit) {
            // We found the first stmml:unit element with an ID value that
            // matches our unit name. Store this DOMElement as the result and
            // skip to the end of the function.
            $stmml = $node;
            break;
          }
        }
      }
    }
  }
  catch (Exception $e) {
    // Do nothing. Always fall through to default stmml:unit creation.
  }

  // If the unit was not found in the results, create a default stmml:unit
  // DOMElement required for EML validation.
  if (!isset($stmml)) {
    $stmml = $dom->createElementNS('http://www.xml-cml.org/schema/stmml-1.1', 'stmml:unit');
    $stmml->setAttribute('id', $unit);
    $description = $dom->createElement('stmml:description');
    $stmml->appendChild($description);
  }

  return $stmml;
}

/**
 * Return the STMML output for an array of units.
 *
 * @param array $units
 *   An array of unit names.
 *
 * @return string
 *   The raw XML of the <stmml:unitList> containing the unit defintions.
 */
function lter_unit_get_units_stmml(array $units) {
  $dom = new DOMDocument();
  $unitList = $dom->createElementNS('http://www.xml-cml.org/schema/stmml-1.1', 'stmml:unitList');
  $unitList->setAttribute('xmlns:sch', 'http://www.ascc.net/xml/schematron');
  $unitList->setAttribute('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
  $unitList->setAttribute('xmlns', 'http://www.xml-cml.org/schema/stmml');
  $unitList->setAttribute('xsi:schemaLocation', 'http://www.xml-cml.org/schema/stmml-1.1  http://nis.lternet.edu/schemas/EML/eml-2.1.0/stmml.xsd');

  foreach ($units as $unit) {
    $result = lter_unit_get_unit_stmml($unit);
    // Because the unit STMML is generated seperately than the DOM being
    // generated here, it has to be 'imported' into the DOM here in order to
    // be appended.
    $node = $dom->importNode($result, TRUE);
    $unitList->appendChild($node);
  }

  //$dom->appendChild($unitList);
  return $dom->saveXML($unitList, LIBXML_NOXMLDECL);
}

function lter_unit_is_unit_standard($unit) {
  $units = lter_unit_get_units();
  return !empty($units[$unit]);
}
